# This GitHub Actions workflow starts a server so the user can connect and work
# in the virtual environment. You mostly don't have to worry about fucking
# anything up since it starts fresh every time.
#
# https://github.com/jstrieb/ctf-collab
#
# Created by Jacob Strieb December 2020

name: Run Interactive Environment

# Only run when manually triggered
on:
  workflow_dispatch:
    inputs:
      ngrok_token:
        description: Token to use for ngrok (optional)
        required: false

jobs:
  start_server:
    name: Set up and start the server
    runs-on: ubuntu-20.04
    steps:
      - name: Install (and upgrade) packages
        run: |
          sudo apt-get update
          # NOTE: upgrading takes way too long, and doesn't seem totally
          # necessary; hence it has been commented out
          # sudo apt-get --yes upgrade


      - uses: actions/checkout@v2


      - name: Install dotfiles
        run: |
          cd
          git clone https://github.com/jstrieb/ctf-collab.git
          cd ctf-collab/dotfiles
          bash install.sh

          cp ./ttyd_run.sh ~/ttyd_run.sh
          cp ./ngrok.yml ~/ngrok.yml

          # Change the runner password to "debian"; by default it has no
          # password, which complicates some things like connecting via SSH
          echo "runner:debian" | sudo chpasswd

          # Add a command to kill the action by killing the "sleep" process
          echo 'alias quit="pkill python3"' >> ~/.bashrc


      - name: Install ngrok and run in the background as a daemon
        run: |
          # Only proceed if there is a user-supplied authtoken for ngrok.
          # Prefer one submitted with a workflow dispatch, but accept one
          # stored as a repository secret.
          NGROK_AUTHTOKEN="${{ github.event.inputs.ngrok_token }}"
          if [ -z "$NGROK_AUTHTOKEN" ]; then
            NGROK_AUTHTOKEN="${{ secrets.NGROK_TOKEN }}"
          fi
          if [ -z "$NGROK_AUTHTOKEN" ]; then
            exit 0
          fi

          # Add the authtoken to the ngrok configuration file
          echo "authtoken: $NGROK_AUTHTOKEN" >> ~/ngrok.yml

          # Download and install ngrok
          cd
          wget \
            --quiet \
            --output-document ngrok.zip \
            "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip"
          unzip ngrok.zip
          sudo mv ngrok /usr/local/bin/ngrok
          touch ~/ngrok.log

          # Run ngrok in the background as a daemon
          start-stop-daemon \
            --start \
            --background \
            --chdir ~/ \
            --exec /usr/local/bin/ngrok \
            -- \
              start \
              -config ~/ngrok.yml \
              ttyd ssh


      - name: Install ttyd and run in the background as a daemon
        run: |
          # xterm is required for tmux\ttyd. Installed here to highlight that
          # this is the specific part of the script that requires it.
          sudo apt-get --yes install xterm

          # Download and install ttyd
          cd
          wget \
            --quiet \
            --output-document ttyd \
            "https://github.com/tsl0922/ttyd/releases/download/1.6.1/ttyd_linux.x86_64"
          chmod +x ttyd
          sudo mv ttyd /usr/local/bin/ttyd

          echo 'cd ~/work/pi-gen/pi-gen \
            && tmux new-session \
              -c ~/work/pi-gen/pi-gen \
              -s "debian""$((RANDOM))" \
              -t debian' \
            >> ~/ttyd_run.sh

          # Run ttyd in the background as a daemon
          start-stop-daemon \
            --start \
            --background \
            --chdir ~/ \
            --exec /usr/local/bin/ttyd \
            -- \
              --port 7681 \
              --credential runner:debian \
              /bin/bash ~/ttyd_run.sh


      - name: Install Tor and run a hidden service in the background as a daemon
        run: |
          sudo apt-get --yes install tor

          # Sometimes it's already running for some reason...?
          sudo service tor stop
          sudo killall tor || true

          # Generate a random port for Tor to use since the default is often
          # taken
          export TOR_SOCKS_PORT="$((1025 + RANDOM % 8975))"

          # Run a hidden service in the background as a daemon -- allow
          # connecting to the ttyd instance via a browser and allow SSH
          tor \
            --runasdaemon 1 \
            --socksport $TOR_SOCKS_PORT \
            --hiddenservicedir /home/runner/tor_service \
            --hiddenserviceport "80 127.0.0.1:7681" \
            --hiddenserviceport "22 127.0.0.1:22"


      - name: Display connection information
        run: |
          # Start a tmux session in the background whose window group everyone
          # will share
          tmux new-session -d -c ~/work/pi-gen/pi-gen -s debian

          echo Waiting for things to start up...
          sleep 20s

          echo
          echo When connecting, use username "'runner'" and password "'debian'"
          echo

          # Print Tor connection info
          echo To connect securely over Tor:
          printf "http://%s\n" "$(cat ~/tor_service/hostname)"
          printf \
            "ssh -o ProxyCommand='nc -x localhost:9150 %%h %%p' ssh://runner@%s\n\n" \
            "$(cat ~/tor_service/hostname)"

          # Print ngrok connection info (if applicable)
          NGROK_AUTHTOKEN="${{ github.event.inputs.ngrok_token }}"
          if [ -z "$NGROK_AUTHTOKEN" ]; then
            NGROK_AUTHTOKEN="${{ secrets.NGROK_TOKEN }}"
          fi
          if [ -n "$NGROK_AUTHTOKEN" ]; then
            echo "To connect using ngrok (i.e., not Tor):"
            cat ~/ngrok.log \
              | jq .url \
              | grep -v "null" \
              | tr -d '"' \
              | sed 's/tcp:\/\/\(.*\)/ssh ssh:\/\/runner@\1/g' \
              | sort
          fi

      - name: Wait...
        run: |
          # Wait... This process will be killed to end the Action. Return a
          # non-failure exit code in any case so that there are no unnecessary
          # notifications about a failed Actions workflow.
          python3 -c "import time; time.sleep(60 * 60 * 6)" || true


      - name: Clean up
        run: |
          echo Done!
